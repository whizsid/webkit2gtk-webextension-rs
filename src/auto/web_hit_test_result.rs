// This file was generated by gir (https://github.com/gtk-rs/gir)
// from gir-files (https://github.com/gtk-rs/gir-files)
// DO NOT EDIT

use glib::object::IsA;
use glib::translate::*;
use glib::StaticType;
use glib::Value;
use gobject_sys;
use std::fmt;
use webkit2_webextension_sys;
use DOMNode;
use HitTestResult;

glib_wrapper! {
    pub struct WebHitTestResult(Object<webkit2_webextension_sys::WebKitWebHitTestResult, webkit2_webextension_sys::WebKitWebHitTestResultClass, WebHitTestResultClass>) @extends HitTestResult;

    match fn {
        get_type => || webkit2_webextension_sys::webkit_web_hit_test_result_get_type(),
    }
}

pub const NONE_WEB_HIT_TEST_RESULT: Option<&WebHitTestResult> = None;

pub trait WebHitTestResultExt: 'static {
    #[cfg(any(feature = "v2_8", feature = "dox"))]
    fn get_node(&self) -> Option<DOMNode>;

    fn get_property_node(&self) -> Option<DOMNode>;
}

impl<O: IsA<WebHitTestResult>> WebHitTestResultExt for O {
    #[cfg(any(feature = "v2_8", feature = "dox"))]
    fn get_node(&self) -> Option<DOMNode> {
        unsafe {
            from_glib_none(webkit2_webextension_sys::webkit_web_hit_test_result_get_node(self.as_ref().to_glib_none().0))
        }
    }

    fn get_property_node(&self) -> Option<DOMNode> {
        unsafe {
            let mut value = Value::from_type(<DOMNode as StaticType>::static_type());
            gobject_sys::g_object_get_property(self.to_glib_none().0 as *mut gobject_sys::GObject, b"node\0".as_ptr() as *const _, value.to_glib_none_mut().0);
            value.get().expect("Return Value for property `node` getter")
        }
    }
}

impl fmt::Display for WebHitTestResult {
    fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {
        write!(f, "WebHitTestResult")
    }
}
