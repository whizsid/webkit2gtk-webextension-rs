// This file was generated by gir (https://github.com/gtk-rs/gir)
// from gir-files (https://github.com/gtk-rs/gir-files)
// DO NOT EDIT

use glib::object::Cast;
use glib::object::IsA;
use glib::signal::connect_raw;
use glib::signal::SignalHandlerId;
use glib::translate::*;
use glib::GString;
use glib::StaticType;
use glib::Value;
use glib_sys;
use gobject_sys;
use libc;
use std::boxed::Box as Box_;
use std::fmt;
use std::mem::transmute;
use webkit2_webextension_sys;
use DOMEventTarget;
use DOMObject;

glib_wrapper! {
    pub struct DOMEvent(Object<webkit2_webextension_sys::WebKitDOMEvent, webkit2_webextension_sys::WebKitDOMEventClass, DOMEventClass>) @extends DOMObject;

    match fn {
        get_type => || webkit2_webextension_sys::webkit_dom_event_get_type(),
    }
}

pub const NONE_DOM_EVENT: Option<&DOMEvent> = None;

pub trait DOMEventExt: 'static {
    #[cfg_attr(feature = "v2_22", deprecated)]
    fn get_bubbles(&self) -> bool;

    #[cfg_attr(feature = "v2_22", deprecated)]
    fn get_cancel_bubble(&self) -> bool;

    #[cfg_attr(feature = "v2_22", deprecated)]
    fn get_cancelable(&self) -> bool;

    #[cfg_attr(feature = "v2_22", deprecated)]
    fn get_current_target(&self) -> Option<DOMEventTarget>;

    #[cfg_attr(feature = "v2_22", deprecated)]
    fn get_event_phase(&self) -> libc::c_ushort;

    #[cfg_attr(feature = "v2_22", deprecated)]
    fn get_event_type(&self) -> Option<GString>;

    #[cfg_attr(feature = "v2_22", deprecated)]
    fn get_return_value(&self) -> bool;

    #[cfg_attr(feature = "v2_22", deprecated)]
    fn get_src_element(&self) -> Option<DOMEventTarget>;

    #[cfg_attr(feature = "v2_22", deprecated)]
    fn get_target(&self) -> Option<DOMEventTarget>;

    #[cfg_attr(feature = "v2_22", deprecated)]
    fn get_time_stamp(&self) -> u32;

    #[cfg_attr(feature = "v2_22", deprecated)]
    fn init_event(&self, eventTypeArg: &str, canBubbleArg: bool, cancelableArg: bool);

    #[cfg_attr(feature = "v2_22", deprecated)]
    fn prevent_default(&self);

    #[cfg_attr(feature = "v2_22", deprecated)]
    fn set_cancel_bubble(&self, value: bool);

    #[cfg_attr(feature = "v2_22", deprecated)]
    fn set_return_value(&self, value: bool);

    #[cfg_attr(feature = "v2_22", deprecated)]
    fn stop_propagation(&self);

    fn get_property_type(&self) -> Option<GString>;

    fn connect_property_bubbles_notify<F: Fn(&Self) + 'static>(&self, f: F) -> SignalHandlerId;

    fn connect_property_cancel_bubble_notify<F: Fn(&Self) + 'static>(&self, f: F) -> SignalHandlerId;

    fn connect_property_cancelable_notify<F: Fn(&Self) + 'static>(&self, f: F) -> SignalHandlerId;

    fn connect_property_current_target_notify<F: Fn(&Self) + 'static>(&self, f: F) -> SignalHandlerId;

    fn connect_property_event_phase_notify<F: Fn(&Self) + 'static>(&self, f: F) -> SignalHandlerId;

    fn connect_property_return_value_notify<F: Fn(&Self) + 'static>(&self, f: F) -> SignalHandlerId;

    fn connect_property_src_element_notify<F: Fn(&Self) + 'static>(&self, f: F) -> SignalHandlerId;

    fn connect_property_target_notify<F: Fn(&Self) + 'static>(&self, f: F) -> SignalHandlerId;

    fn connect_property_time_stamp_notify<F: Fn(&Self) + 'static>(&self, f: F) -> SignalHandlerId;

    fn connect_property_type_notify<F: Fn(&Self) + 'static>(&self, f: F) -> SignalHandlerId;
}

impl<O: IsA<DOMEvent>> DOMEventExt for O {
    fn get_bubbles(&self) -> bool {
        unsafe {
            from_glib(webkit2_webextension_sys::webkit_dom_event_get_bubbles(self.as_ref().to_glib_none().0))
        }
    }

    fn get_cancel_bubble(&self) -> bool {
        unsafe {
            from_glib(webkit2_webextension_sys::webkit_dom_event_get_cancel_bubble(self.as_ref().to_glib_none().0))
        }
    }

    fn get_cancelable(&self) -> bool {
        unsafe {
            from_glib(webkit2_webextension_sys::webkit_dom_event_get_cancelable(self.as_ref().to_glib_none().0))
        }
    }

    fn get_current_target(&self) -> Option<DOMEventTarget> {
        unsafe {
            from_glib_full(webkit2_webextension_sys::webkit_dom_event_get_current_target(self.as_ref().to_glib_none().0))
        }
    }

    fn get_event_phase(&self) -> libc::c_ushort {
        unsafe {
            webkit2_webextension_sys::webkit_dom_event_get_event_phase(self.as_ref().to_glib_none().0)
        }
    }

    fn get_event_type(&self) -> Option<GString> {
        unsafe {
            from_glib_full(webkit2_webextension_sys::webkit_dom_event_get_event_type(self.as_ref().to_glib_none().0))
        }
    }

    fn get_return_value(&self) -> bool {
        unsafe {
            from_glib(webkit2_webextension_sys::webkit_dom_event_get_return_value(self.as_ref().to_glib_none().0))
        }
    }

    fn get_src_element(&self) -> Option<DOMEventTarget> {
        unsafe {
            from_glib_full(webkit2_webextension_sys::webkit_dom_event_get_src_element(self.as_ref().to_glib_none().0))
        }
    }

    fn get_target(&self) -> Option<DOMEventTarget> {
        unsafe {
            from_glib_full(webkit2_webextension_sys::webkit_dom_event_get_target(self.as_ref().to_glib_none().0))
        }
    }

    fn get_time_stamp(&self) -> u32 {
        unsafe {
            webkit2_webextension_sys::webkit_dom_event_get_time_stamp(self.as_ref().to_glib_none().0)
        }
    }

    fn init_event(&self, eventTypeArg: &str, canBubbleArg: bool, cancelableArg: bool) {
        unsafe {
            webkit2_webextension_sys::webkit_dom_event_init_event(self.as_ref().to_glib_none().0, eventTypeArg.to_glib_none().0, canBubbleArg.to_glib(), cancelableArg.to_glib());
        }
    }

    fn prevent_default(&self) {
        unsafe {
            webkit2_webextension_sys::webkit_dom_event_prevent_default(self.as_ref().to_glib_none().0);
        }
    }

    fn set_cancel_bubble(&self, value: bool) {
        unsafe {
            webkit2_webextension_sys::webkit_dom_event_set_cancel_bubble(self.as_ref().to_glib_none().0, value.to_glib());
        }
    }

    fn set_return_value(&self, value: bool) {
        unsafe {
            webkit2_webextension_sys::webkit_dom_event_set_return_value(self.as_ref().to_glib_none().0, value.to_glib());
        }
    }

    fn stop_propagation(&self) {
        unsafe {
            webkit2_webextension_sys::webkit_dom_event_stop_propagation(self.as_ref().to_glib_none().0);
        }
    }

    fn get_property_type(&self) -> Option<GString> {
        unsafe {
            let mut value = Value::from_type(<GString as StaticType>::static_type());
            gobject_sys::g_object_get_property(self.to_glib_none().0 as *mut gobject_sys::GObject, b"type\0".as_ptr() as *const _, value.to_glib_none_mut().0);
            value.get().expect("Return Value for property `type` getter")
        }
    }

    fn connect_property_bubbles_notify<F: Fn(&Self) + 'static>(&self, f: F) -> SignalHandlerId {
        unsafe extern "C" fn notify_bubbles_trampoline<P, F: Fn(&P) + 'static>(this: *mut webkit2_webextension_sys::WebKitDOMEvent, _param_spec: glib_sys::gpointer, f: glib_sys::gpointer)
            where P: IsA<DOMEvent>
        {
            let f: &F = &*(f as *const F);
            f(&DOMEvent::from_glib_borrow(this).unsafe_cast())
        }
        unsafe {
            let f: Box_<F> = Box_::new(f);
            connect_raw(self.as_ptr() as *mut _, b"notify::bubbles\0".as_ptr() as *const _,
                Some(transmute(notify_bubbles_trampoline::<Self, F> as usize)), Box_::into_raw(f))
        }
    }

    fn connect_property_cancel_bubble_notify<F: Fn(&Self) + 'static>(&self, f: F) -> SignalHandlerId {
        unsafe extern "C" fn notify_cancel_bubble_trampoline<P, F: Fn(&P) + 'static>(this: *mut webkit2_webextension_sys::WebKitDOMEvent, _param_spec: glib_sys::gpointer, f: glib_sys::gpointer)
            where P: IsA<DOMEvent>
        {
            let f: &F = &*(f as *const F);
            f(&DOMEvent::from_glib_borrow(this).unsafe_cast())
        }
        unsafe {
            let f: Box_<F> = Box_::new(f);
            connect_raw(self.as_ptr() as *mut _, b"notify::cancel-bubble\0".as_ptr() as *const _,
                Some(transmute(notify_cancel_bubble_trampoline::<Self, F> as usize)), Box_::into_raw(f))
        }
    }

    fn connect_property_cancelable_notify<F: Fn(&Self) + 'static>(&self, f: F) -> SignalHandlerId {
        unsafe extern "C" fn notify_cancelable_trampoline<P, F: Fn(&P) + 'static>(this: *mut webkit2_webextension_sys::WebKitDOMEvent, _param_spec: glib_sys::gpointer, f: glib_sys::gpointer)
            where P: IsA<DOMEvent>
        {
            let f: &F = &*(f as *const F);
            f(&DOMEvent::from_glib_borrow(this).unsafe_cast())
        }
        unsafe {
            let f: Box_<F> = Box_::new(f);
            connect_raw(self.as_ptr() as *mut _, b"notify::cancelable\0".as_ptr() as *const _,
                Some(transmute(notify_cancelable_trampoline::<Self, F> as usize)), Box_::into_raw(f))
        }
    }

    fn connect_property_current_target_notify<F: Fn(&Self) + 'static>(&self, f: F) -> SignalHandlerId {
        unsafe extern "C" fn notify_current_target_trampoline<P, F: Fn(&P) + 'static>(this: *mut webkit2_webextension_sys::WebKitDOMEvent, _param_spec: glib_sys::gpointer, f: glib_sys::gpointer)
            where P: IsA<DOMEvent>
        {
            let f: &F = &*(f as *const F);
            f(&DOMEvent::from_glib_borrow(this).unsafe_cast())
        }
        unsafe {
            let f: Box_<F> = Box_::new(f);
            connect_raw(self.as_ptr() as *mut _, b"notify::current-target\0".as_ptr() as *const _,
                Some(transmute(notify_current_target_trampoline::<Self, F> as usize)), Box_::into_raw(f))
        }
    }

    fn connect_property_event_phase_notify<F: Fn(&Self) + 'static>(&self, f: F) -> SignalHandlerId {
        unsafe extern "C" fn notify_event_phase_trampoline<P, F: Fn(&P) + 'static>(this: *mut webkit2_webextension_sys::WebKitDOMEvent, _param_spec: glib_sys::gpointer, f: glib_sys::gpointer)
            where P: IsA<DOMEvent>
        {
            let f: &F = &*(f as *const F);
            f(&DOMEvent::from_glib_borrow(this).unsafe_cast())
        }
        unsafe {
            let f: Box_<F> = Box_::new(f);
            connect_raw(self.as_ptr() as *mut _, b"notify::event-phase\0".as_ptr() as *const _,
                Some(transmute(notify_event_phase_trampoline::<Self, F> as usize)), Box_::into_raw(f))
        }
    }

    fn connect_property_return_value_notify<F: Fn(&Self) + 'static>(&self, f: F) -> SignalHandlerId {
        unsafe extern "C" fn notify_return_value_trampoline<P, F: Fn(&P) + 'static>(this: *mut webkit2_webextension_sys::WebKitDOMEvent, _param_spec: glib_sys::gpointer, f: glib_sys::gpointer)
            where P: IsA<DOMEvent>
        {
            let f: &F = &*(f as *const F);
            f(&DOMEvent::from_glib_borrow(this).unsafe_cast())
        }
        unsafe {
            let f: Box_<F> = Box_::new(f);
            connect_raw(self.as_ptr() as *mut _, b"notify::return-value\0".as_ptr() as *const _,
                Some(transmute(notify_return_value_trampoline::<Self, F> as usize)), Box_::into_raw(f))
        }
    }

    fn connect_property_src_element_notify<F: Fn(&Self) + 'static>(&self, f: F) -> SignalHandlerId {
        unsafe extern "C" fn notify_src_element_trampoline<P, F: Fn(&P) + 'static>(this: *mut webkit2_webextension_sys::WebKitDOMEvent, _param_spec: glib_sys::gpointer, f: glib_sys::gpointer)
            where P: IsA<DOMEvent>
        {
            let f: &F = &*(f as *const F);
            f(&DOMEvent::from_glib_borrow(this).unsafe_cast())
        }
        unsafe {
            let f: Box_<F> = Box_::new(f);
            connect_raw(self.as_ptr() as *mut _, b"notify::src-element\0".as_ptr() as *const _,
                Some(transmute(notify_src_element_trampoline::<Self, F> as usize)), Box_::into_raw(f))
        }
    }

    fn connect_property_target_notify<F: Fn(&Self) + 'static>(&self, f: F) -> SignalHandlerId {
        unsafe extern "C" fn notify_target_trampoline<P, F: Fn(&P) + 'static>(this: *mut webkit2_webextension_sys::WebKitDOMEvent, _param_spec: glib_sys::gpointer, f: glib_sys::gpointer)
            where P: IsA<DOMEvent>
        {
            let f: &F = &*(f as *const F);
            f(&DOMEvent::from_glib_borrow(this).unsafe_cast())
        }
        unsafe {
            let f: Box_<F> = Box_::new(f);
            connect_raw(self.as_ptr() as *mut _, b"notify::target\0".as_ptr() as *const _,
                Some(transmute(notify_target_trampoline::<Self, F> as usize)), Box_::into_raw(f))
        }
    }

    fn connect_property_time_stamp_notify<F: Fn(&Self) + 'static>(&self, f: F) -> SignalHandlerId {
        unsafe extern "C" fn notify_time_stamp_trampoline<P, F: Fn(&P) + 'static>(this: *mut webkit2_webextension_sys::WebKitDOMEvent, _param_spec: glib_sys::gpointer, f: glib_sys::gpointer)
            where P: IsA<DOMEvent>
        {
            let f: &F = &*(f as *const F);
            f(&DOMEvent::from_glib_borrow(this).unsafe_cast())
        }
        unsafe {
            let f: Box_<F> = Box_::new(f);
            connect_raw(self.as_ptr() as *mut _, b"notify::time-stamp\0".as_ptr() as *const _,
                Some(transmute(notify_time_stamp_trampoline::<Self, F> as usize)), Box_::into_raw(f))
        }
    }

    fn connect_property_type_notify<F: Fn(&Self) + 'static>(&self, f: F) -> SignalHandlerId {
        unsafe extern "C" fn notify_type_trampoline<P, F: Fn(&P) + 'static>(this: *mut webkit2_webextension_sys::WebKitDOMEvent, _param_spec: glib_sys::gpointer, f: glib_sys::gpointer)
            where P: IsA<DOMEvent>
        {
            let f: &F = &*(f as *const F);
            f(&DOMEvent::from_glib_borrow(this).unsafe_cast())
        }
        unsafe {
            let f: Box_<F> = Box_::new(f);
            connect_raw(self.as_ptr() as *mut _, b"notify::type\0".as_ptr() as *const _,
                Some(transmute(notify_type_trampoline::<Self, F> as usize)), Box_::into_raw(f))
        }
    }
}

impl fmt::Display for DOMEvent {
    fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {
        write!(f, "DOMEvent")
    }
}
