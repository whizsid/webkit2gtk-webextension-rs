// This file was generated by gir (https://github.com/gtk-rs/gir)
// from gir-files (https://github.com/gtk-rs/gir-files)
// DO NOT EDIT

use glib;
use glib::object::Cast;
use glib::object::IsA;
use glib::signal::connect_raw;
use glib::signal::SignalHandlerId;
use glib::translate::*;
use glib::GString;
use glib::StaticType;
use glib::Value;
use glib_sys;
use gobject_sys;
use libc;
use std::boxed::Box as Box_;
use std::fmt;
use std::mem::transmute;
use std::ptr;
use webkit2_webextension_sys;
use DOMElement;
use DOMEventTarget;
use DOMHTMLCollection;
use DOMNode;
use DOMObject;

glib_wrapper! {
    pub struct DOMHTMLElement(Object<webkit2_webextension_sys::WebKitDOMHTMLElement, webkit2_webextension_sys::WebKitDOMHTMLElementClass, DOMHTMLElementClass>) @extends DOMElement, DOMNode, DOMObject, @implements DOMEventTarget;

    match fn {
        get_type => || webkit2_webextension_sys::webkit_dom_html_element_get_type(),
    }
}

pub const NONE_DOMHTML_ELEMENT: Option<&DOMHTMLElement> = None;

pub trait DOMHTMLElementExt: 'static {
    #[cfg_attr(feature = "v2_22", deprecated)]
    fn click(&self);

    #[cfg_attr(feature = "v2_22", deprecated)]
    fn get_access_key(&self) -> Option<GString>;

    #[cfg_attr(feature = "v2_10", deprecated)]
    #[cfg(any(not(feature = "v2_10"), feature = "dox"))]
    fn get_children(&self) -> Option<DOMHTMLCollection>;

    #[cfg_attr(feature = "v2_22", deprecated)]
    fn get_content_editable(&self) -> Option<GString>;

    #[cfg_attr(feature = "v2_22", deprecated)]
    fn get_dir(&self) -> Option<GString>;

    #[cfg_attr(feature = "v2_22", deprecated)]
    #[cfg(any(feature = "v2_16", feature = "dox"))]
    fn get_draggable(&self) -> bool;

    #[cfg_attr(feature = "v2_22", deprecated)]
    #[cfg(any(feature = "v2_16", feature = "dox"))]
    fn get_hidden(&self) -> bool;

    #[cfg_attr(feature = "v2_8", deprecated)]
    #[cfg(any(not(feature = "v2_8"), feature = "dox"))]
    fn get_inner_html(&self) -> Option<GString>;

    #[cfg_attr(feature = "v2_22", deprecated)]
    fn get_inner_text(&self) -> Option<GString>;

    #[cfg_attr(feature = "v2_22", deprecated)]
    fn get_is_content_editable(&self) -> bool;

    #[cfg_attr(feature = "v2_22", deprecated)]
    fn get_lang(&self) -> Option<GString>;

    #[cfg_attr(feature = "v2_8", deprecated)]
    #[cfg(any(not(feature = "v2_8"), feature = "dox"))]
    fn get_outer_html(&self) -> Option<GString>;

    #[cfg_attr(feature = "v2_22", deprecated)]
    fn get_outer_text(&self) -> Option<GString>;

    #[cfg_attr(feature = "v2_22", deprecated)]
    #[cfg(any(feature = "v2_16", feature = "dox"))]
    fn get_spellcheck(&self) -> bool;

    #[cfg_attr(feature = "v2_22", deprecated)]
    fn get_tab_index(&self) -> libc::c_long;

    #[cfg_attr(feature = "v2_22", deprecated)]
    fn get_title(&self) -> Option<GString>;

    #[cfg_attr(feature = "v2_22", deprecated)]
    #[cfg(any(feature = "v2_16", feature = "dox"))]
    fn get_translate(&self) -> bool;

    #[cfg_attr(feature = "v2_22", deprecated)]
    #[cfg(any(feature = "v2_16", feature = "dox"))]
    fn get_webkitdropzone(&self) -> Option<GString>;

    #[cfg_attr(feature = "v2_22", deprecated)]
    fn set_access_key(&self, value: &str);

    #[cfg_attr(feature = "v2_22", deprecated)]
    fn set_content_editable(&self, value: &str) -> Result<(), glib::Error>;

    #[cfg_attr(feature = "v2_22", deprecated)]
    fn set_dir(&self, value: &str);

    #[cfg_attr(feature = "v2_22", deprecated)]
    #[cfg(any(feature = "v2_16", feature = "dox"))]
    fn set_draggable(&self, value: bool);

    #[cfg_attr(feature = "v2_22", deprecated)]
    #[cfg(any(feature = "v2_16", feature = "dox"))]
    fn set_hidden(&self, value: bool);

    #[cfg_attr(feature = "v2_8", deprecated)]
    #[cfg(any(not(feature = "v2_8"), feature = "dox"))]
    fn set_inner_html(&self, contents: &str) -> Result<(), glib::Error>;

    #[cfg_attr(feature = "v2_22", deprecated)]
    fn set_inner_text(&self, value: &str) -> Result<(), glib::Error>;

    #[cfg_attr(feature = "v2_22", deprecated)]
    fn set_lang(&self, value: &str);

    #[cfg_attr(feature = "v2_8", deprecated)]
    #[cfg(any(not(feature = "v2_8"), feature = "dox"))]
    fn set_outer_html(&self, contents: &str) -> Result<(), glib::Error>;

    #[cfg_attr(feature = "v2_22", deprecated)]
    fn set_outer_text(&self, value: &str) -> Result<(), glib::Error>;

    #[cfg_attr(feature = "v2_22", deprecated)]
    #[cfg(any(feature = "v2_16", feature = "dox"))]
    fn set_spellcheck(&self, value: bool);

    #[cfg_attr(feature = "v2_22", deprecated)]
    fn set_tab_index(&self, value: libc::c_long);

    #[cfg_attr(feature = "v2_22", deprecated)]
    fn set_title(&self, value: &str);

    #[cfg_attr(feature = "v2_22", deprecated)]
    #[cfg(any(feature = "v2_16", feature = "dox"))]
    fn set_translate(&self, value: bool);

    #[cfg_attr(feature = "v2_22", deprecated)]
    #[cfg(any(feature = "v2_16", feature = "dox"))]
    fn set_webkitdropzone(&self, value: &str);

    fn get_property_draggable(&self) -> bool;

    fn set_property_draggable(&self, draggable: bool);

    fn get_property_hidden(&self) -> bool;

    fn set_property_hidden(&self, hidden: bool);

    fn get_property_spellcheck(&self) -> bool;

    fn set_property_spellcheck(&self, spellcheck: bool);

    fn get_property_translate(&self) -> bool;

    fn set_property_translate(&self, translate: bool);

    fn get_property_webkitdropzone(&self) -> Option<GString>;

    fn set_property_webkitdropzone(&self, webkitdropzone: Option<&str>);

    fn connect_property_access_key_notify<F: Fn(&Self) + 'static>(&self, f: F) -> SignalHandlerId;

    fn connect_property_content_editable_notify<F: Fn(&Self) + 'static>(&self, f: F) -> SignalHandlerId;

    fn connect_property_dir_notify<F: Fn(&Self) + 'static>(&self, f: F) -> SignalHandlerId;

    fn connect_property_draggable_notify<F: Fn(&Self) + 'static>(&self, f: F) -> SignalHandlerId;

    fn connect_property_hidden_notify<F: Fn(&Self) + 'static>(&self, f: F) -> SignalHandlerId;

    fn connect_property_inner_text_notify<F: Fn(&Self) + 'static>(&self, f: F) -> SignalHandlerId;

    fn connect_property_is_content_editable_notify<F: Fn(&Self) + 'static>(&self, f: F) -> SignalHandlerId;

    fn connect_property_lang_notify<F: Fn(&Self) + 'static>(&self, f: F) -> SignalHandlerId;

    fn connect_property_outer_text_notify<F: Fn(&Self) + 'static>(&self, f: F) -> SignalHandlerId;

    fn connect_property_spellcheck_notify<F: Fn(&Self) + 'static>(&self, f: F) -> SignalHandlerId;

    fn connect_property_tab_index_notify<F: Fn(&Self) + 'static>(&self, f: F) -> SignalHandlerId;

    fn connect_property_title_notify<F: Fn(&Self) + 'static>(&self, f: F) -> SignalHandlerId;

    fn connect_property_translate_notify<F: Fn(&Self) + 'static>(&self, f: F) -> SignalHandlerId;

    fn connect_property_webkitdropzone_notify<F: Fn(&Self) + 'static>(&self, f: F) -> SignalHandlerId;
}

impl<O: IsA<DOMHTMLElement>> DOMHTMLElementExt for O {
    fn click(&self) {
        unsafe {
            webkit2_webextension_sys::webkit_dom_html_element_click(self.as_ref().to_glib_none().0);
        }
    }

    fn get_access_key(&self) -> Option<GString> {
        unsafe {
            from_glib_full(webkit2_webextension_sys::webkit_dom_html_element_get_access_key(self.as_ref().to_glib_none().0))
        }
    }

    #[cfg(any(not(feature = "v2_10"), feature = "dox"))]
    fn get_children(&self) -> Option<DOMHTMLCollection> {
        unsafe {
            from_glib_full(webkit2_webextension_sys::webkit_dom_html_element_get_children(self.as_ref().to_glib_none().0))
        }
    }

    fn get_content_editable(&self) -> Option<GString> {
        unsafe {
            from_glib_full(webkit2_webextension_sys::webkit_dom_html_element_get_content_editable(self.as_ref().to_glib_none().0))
        }
    }

    fn get_dir(&self) -> Option<GString> {
        unsafe {
            from_glib_full(webkit2_webextension_sys::webkit_dom_html_element_get_dir(self.as_ref().to_glib_none().0))
        }
    }

    #[cfg(any(feature = "v2_16", feature = "dox"))]
    fn get_draggable(&self) -> bool {
        unsafe {
            from_glib(webkit2_webextension_sys::webkit_dom_html_element_get_draggable(self.as_ref().to_glib_none().0))
        }
    }

    #[cfg(any(feature = "v2_16", feature = "dox"))]
    fn get_hidden(&self) -> bool {
        unsafe {
            from_glib(webkit2_webextension_sys::webkit_dom_html_element_get_hidden(self.as_ref().to_glib_none().0))
        }
    }

    #[cfg(any(not(feature = "v2_8"), feature = "dox"))]
    fn get_inner_html(&self) -> Option<GString> {
        unsafe {
            from_glib_full(webkit2_webextension_sys::webkit_dom_html_element_get_inner_html(self.as_ref().to_glib_none().0))
        }
    }

    fn get_inner_text(&self) -> Option<GString> {
        unsafe {
            from_glib_full(webkit2_webextension_sys::webkit_dom_html_element_get_inner_text(self.as_ref().to_glib_none().0))
        }
    }

    fn get_is_content_editable(&self) -> bool {
        unsafe {
            from_glib(webkit2_webextension_sys::webkit_dom_html_element_get_is_content_editable(self.as_ref().to_glib_none().0))
        }
    }

    fn get_lang(&self) -> Option<GString> {
        unsafe {
            from_glib_full(webkit2_webextension_sys::webkit_dom_html_element_get_lang(self.as_ref().to_glib_none().0))
        }
    }

    #[cfg(any(not(feature = "v2_8"), feature = "dox"))]
    fn get_outer_html(&self) -> Option<GString> {
        unsafe {
            from_glib_full(webkit2_webextension_sys::webkit_dom_html_element_get_outer_html(self.as_ref().to_glib_none().0))
        }
    }

    fn get_outer_text(&self) -> Option<GString> {
        unsafe {
            from_glib_full(webkit2_webextension_sys::webkit_dom_html_element_get_outer_text(self.as_ref().to_glib_none().0))
        }
    }

    #[cfg(any(feature = "v2_16", feature = "dox"))]
    fn get_spellcheck(&self) -> bool {
        unsafe {
            from_glib(webkit2_webextension_sys::webkit_dom_html_element_get_spellcheck(self.as_ref().to_glib_none().0))
        }
    }

    fn get_tab_index(&self) -> libc::c_long {
        unsafe {
            webkit2_webextension_sys::webkit_dom_html_element_get_tab_index(self.as_ref().to_glib_none().0)
        }
    }

    fn get_title(&self) -> Option<GString> {
        unsafe {
            from_glib_full(webkit2_webextension_sys::webkit_dom_html_element_get_title(self.as_ref().to_glib_none().0))
        }
    }

    #[cfg(any(feature = "v2_16", feature = "dox"))]
    fn get_translate(&self) -> bool {
        unsafe {
            from_glib(webkit2_webextension_sys::webkit_dom_html_element_get_translate(self.as_ref().to_glib_none().0))
        }
    }

    #[cfg(any(feature = "v2_16", feature = "dox"))]
    fn get_webkitdropzone(&self) -> Option<GString> {
        unsafe {
            from_glib_full(webkit2_webextension_sys::webkit_dom_html_element_get_webkitdropzone(self.as_ref().to_glib_none().0))
        }
    }

    fn set_access_key(&self, value: &str) {
        unsafe {
            webkit2_webextension_sys::webkit_dom_html_element_set_access_key(self.as_ref().to_glib_none().0, value.to_glib_none().0);
        }
    }

    fn set_content_editable(&self, value: &str) -> Result<(), glib::Error> {
        unsafe {
            let mut error = ptr::null_mut();
            let _ = webkit2_webextension_sys::webkit_dom_html_element_set_content_editable(self.as_ref().to_glib_none().0, value.to_glib_none().0, &mut error);
            if error.is_null() { Ok(()) } else { Err(from_glib_full(error)) }
        }
    }

    fn set_dir(&self, value: &str) {
        unsafe {
            webkit2_webextension_sys::webkit_dom_html_element_set_dir(self.as_ref().to_glib_none().0, value.to_glib_none().0);
        }
    }

    #[cfg(any(feature = "v2_16", feature = "dox"))]
    fn set_draggable(&self, value: bool) {
        unsafe {
            webkit2_webextension_sys::webkit_dom_html_element_set_draggable(self.as_ref().to_glib_none().0, value.to_glib());
        }
    }

    #[cfg(any(feature = "v2_16", feature = "dox"))]
    fn set_hidden(&self, value: bool) {
        unsafe {
            webkit2_webextension_sys::webkit_dom_html_element_set_hidden(self.as_ref().to_glib_none().0, value.to_glib());
        }
    }

    #[cfg(any(not(feature = "v2_8"), feature = "dox"))]
    fn set_inner_html(&self, contents: &str) -> Result<(), glib::Error> {
        unsafe {
            let mut error = ptr::null_mut();
            let _ = webkit2_webextension_sys::webkit_dom_html_element_set_inner_html(self.as_ref().to_glib_none().0, contents.to_glib_none().0, &mut error);
            if error.is_null() { Ok(()) } else { Err(from_glib_full(error)) }
        }
    }

    fn set_inner_text(&self, value: &str) -> Result<(), glib::Error> {
        unsafe {
            let mut error = ptr::null_mut();
            let _ = webkit2_webextension_sys::webkit_dom_html_element_set_inner_text(self.as_ref().to_glib_none().0, value.to_glib_none().0, &mut error);
            if error.is_null() { Ok(()) } else { Err(from_glib_full(error)) }
        }
    }

    fn set_lang(&self, value: &str) {
        unsafe {
            webkit2_webextension_sys::webkit_dom_html_element_set_lang(self.as_ref().to_glib_none().0, value.to_glib_none().0);
        }
    }

    #[cfg(any(not(feature = "v2_8"), feature = "dox"))]
    fn set_outer_html(&self, contents: &str) -> Result<(), glib::Error> {
        unsafe {
            let mut error = ptr::null_mut();
            let _ = webkit2_webextension_sys::webkit_dom_html_element_set_outer_html(self.as_ref().to_glib_none().0, contents.to_glib_none().0, &mut error);
            if error.is_null() { Ok(()) } else { Err(from_glib_full(error)) }
        }
    }

    fn set_outer_text(&self, value: &str) -> Result<(), glib::Error> {
        unsafe {
            let mut error = ptr::null_mut();
            let _ = webkit2_webextension_sys::webkit_dom_html_element_set_outer_text(self.as_ref().to_glib_none().0, value.to_glib_none().0, &mut error);
            if error.is_null() { Ok(()) } else { Err(from_glib_full(error)) }
        }
    }

    #[cfg(any(feature = "v2_16", feature = "dox"))]
    fn set_spellcheck(&self, value: bool) {
        unsafe {
            webkit2_webextension_sys::webkit_dom_html_element_set_spellcheck(self.as_ref().to_glib_none().0, value.to_glib());
        }
    }

    fn set_tab_index(&self, value: libc::c_long) {
        unsafe {
            webkit2_webextension_sys::webkit_dom_html_element_set_tab_index(self.as_ref().to_glib_none().0, value);
        }
    }

    fn set_title(&self, value: &str) {
        unsafe {
            webkit2_webextension_sys::webkit_dom_html_element_set_title(self.as_ref().to_glib_none().0, value.to_glib_none().0);
        }
    }

    #[cfg(any(feature = "v2_16", feature = "dox"))]
    fn set_translate(&self, value: bool) {
        unsafe {
            webkit2_webextension_sys::webkit_dom_html_element_set_translate(self.as_ref().to_glib_none().0, value.to_glib());
        }
    }

    #[cfg(any(feature = "v2_16", feature = "dox"))]
    fn set_webkitdropzone(&self, value: &str) {
        unsafe {
            webkit2_webextension_sys::webkit_dom_html_element_set_webkitdropzone(self.as_ref().to_glib_none().0, value.to_glib_none().0);
        }
    }

    fn get_property_draggable(&self) -> bool {
        unsafe {
            let mut value = Value::from_type(<bool as StaticType>::static_type());
            gobject_sys::g_object_get_property(self.to_glib_none().0 as *mut gobject_sys::GObject, b"draggable\0".as_ptr() as *const _, value.to_glib_none_mut().0);
            value.get().expect("Return Value for property `draggable` getter").unwrap()
        }
    }

    fn set_property_draggable(&self, draggable: bool) {
        unsafe {
            gobject_sys::g_object_set_property(self.to_glib_none().0 as *mut gobject_sys::GObject, b"draggable\0".as_ptr() as *const _, Value::from(&draggable).to_glib_none().0);
        }
    }

    fn get_property_hidden(&self) -> bool {
        unsafe {
            let mut value = Value::from_type(<bool as StaticType>::static_type());
            gobject_sys::g_object_get_property(self.to_glib_none().0 as *mut gobject_sys::GObject, b"hidden\0".as_ptr() as *const _, value.to_glib_none_mut().0);
            value.get().expect("Return Value for property `hidden` getter").unwrap()
        }
    }

    fn set_property_hidden(&self, hidden: bool) {
        unsafe {
            gobject_sys::g_object_set_property(self.to_glib_none().0 as *mut gobject_sys::GObject, b"hidden\0".as_ptr() as *const _, Value::from(&hidden).to_glib_none().0);
        }
    }

    fn get_property_spellcheck(&self) -> bool {
        unsafe {
            let mut value = Value::from_type(<bool as StaticType>::static_type());
            gobject_sys::g_object_get_property(self.to_glib_none().0 as *mut gobject_sys::GObject, b"spellcheck\0".as_ptr() as *const _, value.to_glib_none_mut().0);
            value.get().expect("Return Value for property `spellcheck` getter").unwrap()
        }
    }

    fn set_property_spellcheck(&self, spellcheck: bool) {
        unsafe {
            gobject_sys::g_object_set_property(self.to_glib_none().0 as *mut gobject_sys::GObject, b"spellcheck\0".as_ptr() as *const _, Value::from(&spellcheck).to_glib_none().0);
        }
    }

    fn get_property_translate(&self) -> bool {
        unsafe {
            let mut value = Value::from_type(<bool as StaticType>::static_type());
            gobject_sys::g_object_get_property(self.to_glib_none().0 as *mut gobject_sys::GObject, b"translate\0".as_ptr() as *const _, value.to_glib_none_mut().0);
            value.get().expect("Return Value for property `translate` getter").unwrap()
        }
    }

    fn set_property_translate(&self, translate: bool) {
        unsafe {
            gobject_sys::g_object_set_property(self.to_glib_none().0 as *mut gobject_sys::GObject, b"translate\0".as_ptr() as *const _, Value::from(&translate).to_glib_none().0);
        }
    }

    fn get_property_webkitdropzone(&self) -> Option<GString> {
        unsafe {
            let mut value = Value::from_type(<GString as StaticType>::static_type());
            gobject_sys::g_object_get_property(self.to_glib_none().0 as *mut gobject_sys::GObject, b"webkitdropzone\0".as_ptr() as *const _, value.to_glib_none_mut().0);
            value.get().expect("Return Value for property `webkitdropzone` getter")
        }
    }

    fn set_property_webkitdropzone(&self, webkitdropzone: Option<&str>) {
        unsafe {
            gobject_sys::g_object_set_property(self.to_glib_none().0 as *mut gobject_sys::GObject, b"webkitdropzone\0".as_ptr() as *const _, Value::from(webkitdropzone).to_glib_none().0);
        }
    }

    fn connect_property_access_key_notify<F: Fn(&Self) + 'static>(&self, f: F) -> SignalHandlerId {
        unsafe extern "C" fn notify_access_key_trampoline<P, F: Fn(&P) + 'static>(this: *mut webkit2_webextension_sys::WebKitDOMHTMLElement, _param_spec: glib_sys::gpointer, f: glib_sys::gpointer)
            where P: IsA<DOMHTMLElement>
        {
            let f: &F = &*(f as *const F);
            f(&DOMHTMLElement::from_glib_borrow(this).unsafe_cast())
        }
        unsafe {
            let f: Box_<F> = Box_::new(f);
            connect_raw(self.as_ptr() as *mut _, b"notify::access-key\0".as_ptr() as *const _,
                Some(transmute(notify_access_key_trampoline::<Self, F> as usize)), Box_::into_raw(f))
        }
    }

    fn connect_property_content_editable_notify<F: Fn(&Self) + 'static>(&self, f: F) -> SignalHandlerId {
        unsafe extern "C" fn notify_content_editable_trampoline<P, F: Fn(&P) + 'static>(this: *mut webkit2_webextension_sys::WebKitDOMHTMLElement, _param_spec: glib_sys::gpointer, f: glib_sys::gpointer)
            where P: IsA<DOMHTMLElement>
        {
            let f: &F = &*(f as *const F);
            f(&DOMHTMLElement::from_glib_borrow(this).unsafe_cast())
        }
        unsafe {
            let f: Box_<F> = Box_::new(f);
            connect_raw(self.as_ptr() as *mut _, b"notify::content-editable\0".as_ptr() as *const _,
                Some(transmute(notify_content_editable_trampoline::<Self, F> as usize)), Box_::into_raw(f))
        }
    }

    fn connect_property_dir_notify<F: Fn(&Self) + 'static>(&self, f: F) -> SignalHandlerId {
        unsafe extern "C" fn notify_dir_trampoline<P, F: Fn(&P) + 'static>(this: *mut webkit2_webextension_sys::WebKitDOMHTMLElement, _param_spec: glib_sys::gpointer, f: glib_sys::gpointer)
            where P: IsA<DOMHTMLElement>
        {
            let f: &F = &*(f as *const F);
            f(&DOMHTMLElement::from_glib_borrow(this).unsafe_cast())
        }
        unsafe {
            let f: Box_<F> = Box_::new(f);
            connect_raw(self.as_ptr() as *mut _, b"notify::dir\0".as_ptr() as *const _,
                Some(transmute(notify_dir_trampoline::<Self, F> as usize)), Box_::into_raw(f))
        }
    }

    fn connect_property_draggable_notify<F: Fn(&Self) + 'static>(&self, f: F) -> SignalHandlerId {
        unsafe extern "C" fn notify_draggable_trampoline<P, F: Fn(&P) + 'static>(this: *mut webkit2_webextension_sys::WebKitDOMHTMLElement, _param_spec: glib_sys::gpointer, f: glib_sys::gpointer)
            where P: IsA<DOMHTMLElement>
        {
            let f: &F = &*(f as *const F);
            f(&DOMHTMLElement::from_glib_borrow(this).unsafe_cast())
        }
        unsafe {
            let f: Box_<F> = Box_::new(f);
            connect_raw(self.as_ptr() as *mut _, b"notify::draggable\0".as_ptr() as *const _,
                Some(transmute(notify_draggable_trampoline::<Self, F> as usize)), Box_::into_raw(f))
        }
    }

    fn connect_property_hidden_notify<F: Fn(&Self) + 'static>(&self, f: F) -> SignalHandlerId {
        unsafe extern "C" fn notify_hidden_trampoline<P, F: Fn(&P) + 'static>(this: *mut webkit2_webextension_sys::WebKitDOMHTMLElement, _param_spec: glib_sys::gpointer, f: glib_sys::gpointer)
            where P: IsA<DOMHTMLElement>
        {
            let f: &F = &*(f as *const F);
            f(&DOMHTMLElement::from_glib_borrow(this).unsafe_cast())
        }
        unsafe {
            let f: Box_<F> = Box_::new(f);
            connect_raw(self.as_ptr() as *mut _, b"notify::hidden\0".as_ptr() as *const _,
                Some(transmute(notify_hidden_trampoline::<Self, F> as usize)), Box_::into_raw(f))
        }
    }

    fn connect_property_inner_text_notify<F: Fn(&Self) + 'static>(&self, f: F) -> SignalHandlerId {
        unsafe extern "C" fn notify_inner_text_trampoline<P, F: Fn(&P) + 'static>(this: *mut webkit2_webextension_sys::WebKitDOMHTMLElement, _param_spec: glib_sys::gpointer, f: glib_sys::gpointer)
            where P: IsA<DOMHTMLElement>
        {
            let f: &F = &*(f as *const F);
            f(&DOMHTMLElement::from_glib_borrow(this).unsafe_cast())
        }
        unsafe {
            let f: Box_<F> = Box_::new(f);
            connect_raw(self.as_ptr() as *mut _, b"notify::inner-text\0".as_ptr() as *const _,
                Some(transmute(notify_inner_text_trampoline::<Self, F> as usize)), Box_::into_raw(f))
        }
    }

    fn connect_property_is_content_editable_notify<F: Fn(&Self) + 'static>(&self, f: F) -> SignalHandlerId {
        unsafe extern "C" fn notify_is_content_editable_trampoline<P, F: Fn(&P) + 'static>(this: *mut webkit2_webextension_sys::WebKitDOMHTMLElement, _param_spec: glib_sys::gpointer, f: glib_sys::gpointer)
            where P: IsA<DOMHTMLElement>
        {
            let f: &F = &*(f as *const F);
            f(&DOMHTMLElement::from_glib_borrow(this).unsafe_cast())
        }
        unsafe {
            let f: Box_<F> = Box_::new(f);
            connect_raw(self.as_ptr() as *mut _, b"notify::is-content-editable\0".as_ptr() as *const _,
                Some(transmute(notify_is_content_editable_trampoline::<Self, F> as usize)), Box_::into_raw(f))
        }
    }

    fn connect_property_lang_notify<F: Fn(&Self) + 'static>(&self, f: F) -> SignalHandlerId {
        unsafe extern "C" fn notify_lang_trampoline<P, F: Fn(&P) + 'static>(this: *mut webkit2_webextension_sys::WebKitDOMHTMLElement, _param_spec: glib_sys::gpointer, f: glib_sys::gpointer)
            where P: IsA<DOMHTMLElement>
        {
            let f: &F = &*(f as *const F);
            f(&DOMHTMLElement::from_glib_borrow(this).unsafe_cast())
        }
        unsafe {
            let f: Box_<F> = Box_::new(f);
            connect_raw(self.as_ptr() as *mut _, b"notify::lang\0".as_ptr() as *const _,
                Some(transmute(notify_lang_trampoline::<Self, F> as usize)), Box_::into_raw(f))
        }
    }

    fn connect_property_outer_text_notify<F: Fn(&Self) + 'static>(&self, f: F) -> SignalHandlerId {
        unsafe extern "C" fn notify_outer_text_trampoline<P, F: Fn(&P) + 'static>(this: *mut webkit2_webextension_sys::WebKitDOMHTMLElement, _param_spec: glib_sys::gpointer, f: glib_sys::gpointer)
            where P: IsA<DOMHTMLElement>
        {
            let f: &F = &*(f as *const F);
            f(&DOMHTMLElement::from_glib_borrow(this).unsafe_cast())
        }
        unsafe {
            let f: Box_<F> = Box_::new(f);
            connect_raw(self.as_ptr() as *mut _, b"notify::outer-text\0".as_ptr() as *const _,
                Some(transmute(notify_outer_text_trampoline::<Self, F> as usize)), Box_::into_raw(f))
        }
    }

    fn connect_property_spellcheck_notify<F: Fn(&Self) + 'static>(&self, f: F) -> SignalHandlerId {
        unsafe extern "C" fn notify_spellcheck_trampoline<P, F: Fn(&P) + 'static>(this: *mut webkit2_webextension_sys::WebKitDOMHTMLElement, _param_spec: glib_sys::gpointer, f: glib_sys::gpointer)
            where P: IsA<DOMHTMLElement>
        {
            let f: &F = &*(f as *const F);
            f(&DOMHTMLElement::from_glib_borrow(this).unsafe_cast())
        }
        unsafe {
            let f: Box_<F> = Box_::new(f);
            connect_raw(self.as_ptr() as *mut _, b"notify::spellcheck\0".as_ptr() as *const _,
                Some(transmute(notify_spellcheck_trampoline::<Self, F> as usize)), Box_::into_raw(f))
        }
    }

    fn connect_property_tab_index_notify<F: Fn(&Self) + 'static>(&self, f: F) -> SignalHandlerId {
        unsafe extern "C" fn notify_tab_index_trampoline<P, F: Fn(&P) + 'static>(this: *mut webkit2_webextension_sys::WebKitDOMHTMLElement, _param_spec: glib_sys::gpointer, f: glib_sys::gpointer)
            where P: IsA<DOMHTMLElement>
        {
            let f: &F = &*(f as *const F);
            f(&DOMHTMLElement::from_glib_borrow(this).unsafe_cast())
        }
        unsafe {
            let f: Box_<F> = Box_::new(f);
            connect_raw(self.as_ptr() as *mut _, b"notify::tab-index\0".as_ptr() as *const _,
                Some(transmute(notify_tab_index_trampoline::<Self, F> as usize)), Box_::into_raw(f))
        }
    }

    fn connect_property_title_notify<F: Fn(&Self) + 'static>(&self, f: F) -> SignalHandlerId {
        unsafe extern "C" fn notify_title_trampoline<P, F: Fn(&P) + 'static>(this: *mut webkit2_webextension_sys::WebKitDOMHTMLElement, _param_spec: glib_sys::gpointer, f: glib_sys::gpointer)
            where P: IsA<DOMHTMLElement>
        {
            let f: &F = &*(f as *const F);
            f(&DOMHTMLElement::from_glib_borrow(this).unsafe_cast())
        }
        unsafe {
            let f: Box_<F> = Box_::new(f);
            connect_raw(self.as_ptr() as *mut _, b"notify::title\0".as_ptr() as *const _,
                Some(transmute(notify_title_trampoline::<Self, F> as usize)), Box_::into_raw(f))
        }
    }

    fn connect_property_translate_notify<F: Fn(&Self) + 'static>(&self, f: F) -> SignalHandlerId {
        unsafe extern "C" fn notify_translate_trampoline<P, F: Fn(&P) + 'static>(this: *mut webkit2_webextension_sys::WebKitDOMHTMLElement, _param_spec: glib_sys::gpointer, f: glib_sys::gpointer)
            where P: IsA<DOMHTMLElement>
        {
            let f: &F = &*(f as *const F);
            f(&DOMHTMLElement::from_glib_borrow(this).unsafe_cast())
        }
        unsafe {
            let f: Box_<F> = Box_::new(f);
            connect_raw(self.as_ptr() as *mut _, b"notify::translate\0".as_ptr() as *const _,
                Some(transmute(notify_translate_trampoline::<Self, F> as usize)), Box_::into_raw(f))
        }
    }

    fn connect_property_webkitdropzone_notify<F: Fn(&Self) + 'static>(&self, f: F) -> SignalHandlerId {
        unsafe extern "C" fn notify_webkitdropzone_trampoline<P, F: Fn(&P) + 'static>(this: *mut webkit2_webextension_sys::WebKitDOMHTMLElement, _param_spec: glib_sys::gpointer, f: glib_sys::gpointer)
            where P: IsA<DOMHTMLElement>
        {
            let f: &F = &*(f as *const F);
            f(&DOMHTMLElement::from_glib_borrow(this).unsafe_cast())
        }
        unsafe {
            let f: Box_<F> = Box_::new(f);
            connect_raw(self.as_ptr() as *mut _, b"notify::webkitdropzone\0".as_ptr() as *const _,
                Some(transmute(notify_webkitdropzone_trampoline::<Self, F> as usize)), Box_::into_raw(f))
        }
    }
}

impl fmt::Display for DOMHTMLElement {
    fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {
        write!(f, "DOMHTMLElement")
    }
}
